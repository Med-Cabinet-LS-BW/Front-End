{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Tim\\\\Desktop\\\\Lambda\\\\Build-Week-2\\\\Front-End\\\\medizen\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Tim\\\\Desktop\\\\Lambda\\\\Build-Week-2\\\\Front-End\\\\medizen\\\\src\\\\src\\\\components\\\\Auth\\\\Register.js\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { withFormik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\n\nconst Register = ({\n  values,\n  errors,\n  touched,\n  status\n}) => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        user = _useState2[0],\n        setUser = _useState2[1];\n\n  useEffect(() => {\n    status && setUser(user => [...user, status]);\n  }, [status]);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, \"Register Below\"), React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(Field, {\n    type: \"email\",\n    name: \"email\",\n    placeholder: \"email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }), touched.email && errors.email && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, errors.email), React.createElement(Field, {\n    type: \"password\",\n    name: \"password\",\n    autoComplete: \"off\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }), touched.password && errors.password && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, errors.password), React.createElement(Field, {\n    type: \"password\",\n    name: \"confirmPassword\",\n    autoComplete: \"off\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }), touched.password && errors.password && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, errors.password), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"Submit\")));\n};\n\nconst FormikRegister = withFormik({\n  mapPropsToValues({\n    email,\n    password,\n    confirmPassword\n  }) {\n    return {\n      // name: name || '',\n      email: email || '',\n      password: password || '',\n      confirmPassword: confirmPassword || ''\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    // name: Yup.string().required(),\n    email: Yup.string().required().email(),\n    password: Yup.string().required('No Password Provided.').min(8, 'Password too short. 8 characters minimum.'),\n    confirmPassword: Yup.string().required().label('Confirm Password').test('passwords-match', 'Passwords must match.', function (e) {\n      return this.parent.password === e;\n    })\n  }),\n\n  handleSubmit(values, {\n    setStatus,\n    resetForm\n  }) {\n    axios.post(\"https://medizen-api.herokuapp.com/api/auth/register\", values).then(response => {\n      console.log(response);\n      localStorage.setItem(\"token\", response.data);\n      setStatus(response.data);\n    }).catch(err => console.log(err.response));\n    resetForm();\n  }\n\n})(Register);\nexport default FormikRegister;","map":{"version":3,"sources":["C:/Users/Tim/Desktop/Lambda/Build-Week-2/Front-End/medizen/src/src/components/Auth/Register.js"],"names":["React","useState","useEffect","axios","withFormik","Form","Field","Yup","Register","values","errors","touched","status","user","setUser","email","password","FormikRegister","mapPropsToValues","confirmPassword","validationSchema","object","shape","string","required","min","label","test","e","parent","handleSubmit","setStatus","resetForm","post","then","response","console","log","localStorage","setItem","data","catch","err"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\r\nimport axios from \"axios\";\r\nimport { withFormik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\nconst Register = ({values, errors, touched, status}) => {\r\n\r\n    const [user, setUser] = useState([]);\r\n\r\n    useEffect(() => {\r\n        status && setUser(user => [...user, status]);\r\n    }, [status])\r\n\r\n    return (\r\n        <div>\r\n            <p>Register Below</p>\r\n            <Form>\r\n                {/* <Field type=\"text\" name=\"name\" placeholder=\"name\" />\r\n                {touched.name && errors.name && (\r\n                    <p>{errors.name}</p>\r\n                )} */}\r\n                <Field type=\"email\" name=\"email\" placeholder=\"email\" />\r\n                {touched.email && errors.email && <p>{errors.email}</p>}\r\n                <Field type=\"password\" name=\"password\" autoComplete=\"off\" />\r\n                {touched.password && errors.password && <p>{errors.password}</p>}\r\n                <Field type=\"password\" name=\"confirmPassword\" autoComplete=\"off\" />\r\n                {touched.password && errors.password && <p>{errors.password}</p>}\r\n                <button type=\"submit\">Submit</button>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst FormikRegister = withFormik({\r\n    mapPropsToValues({email, password, confirmPassword}) {\r\n        return {\r\n            // name: name || '',\r\n            email: email || '',\r\n            password: password || '',\r\n            confirmPassword: confirmPassword || '',\r\n        };\r\n    },\r\n    validationSchema: Yup.object().shape({\r\n        // name: Yup.string().required(),\r\n        email: Yup.string().required().email(),\r\n        password: Yup.string().required('No Password Provided.').min(8, 'Password too short. 8 characters minimum.'),\r\n        confirmPassword: Yup.string().required().label('Confirm Password').test('passwords-match', 'Passwords must match.', function(e) {return this.parent.password === e;})\r\n    }),\r\n    handleSubmit(values, {setStatus, resetForm}) {\r\n        axios.post(\"https://medizen-api.herokuapp.com/api/auth/register\", values)\r\n        .then(response => {\r\n            console.log(response);\r\n            localStorage.setItem(\"token\", response.data);\r\n            setStatus(response.data);\r\n        })\r\n        .catch(err => console.log(err.response));\r\n        resetForm();\r\n    }\r\n})(Register)\r\n\r\nexport default FormikRegister;"]},"metadata":{},"sourceType":"module"}